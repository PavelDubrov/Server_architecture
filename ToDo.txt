1. Представим, что у нас есть данные, которые мы очень часто читаем по сравнению
с другими(например словарь стран). Как можно это оптимизировать?

-----
Думаю нам нужно использовать кеширование. Погуглив на эту тему я наткнулся на
noSQL БД Redis. Эта БД будет хранить данные в оперативной памяти, а не на жестком диске.
Это позволит нам читать данные в десятки (в сотни ? в тысячи ??) раз быстрее.
Ну и соответсвенно, если данных будет очень много - нам понадобится много оперативки,
и в какой-то момент времени нам придется перенести эту БД на отдельный сервер,
на котором будет много оперативки, зато проц можно будет поставить послабее, а
жесткий диск поменьше.
-----



2. Что можно сделать, если таблица вакансий стала слишком большой? Какие есть
решения на уровне текущей базы данных? Можно ли ее чем то заменить?

-----
Честно говоря я не понимаю, как можно решить эту проблему на уровне текущей БД.
Возможно нам поможет кеширование данных. Может нам стоит разбить таблицу на несколько
таблиц, в пределах одной БД. Но как именно это реализовать я не помнимаю ))
Можно заменить текущую БД на распределенную, такую как Hadoop или Cassandra.
Тут мы получим преимущество в скорости и надежности (если какой то сервер накроется,
остальные продолжат работать).
Из минусов - много серверов, их надо настраивать и обслуживать, оплачивать аренду и т.д.
-----



3. Какие вы видите узкие места, возможно неправильно выбранные технологии в
текущей схеме(можно рассмотреть как “нашу” схему, так и схему настоящего hh.ru)

-----
Да мне в принципе, (с моим текущим уровнем знаний по архитектурам приложений)))
в нашей схеме все нравится. Балансировщик есть, есть несколько инстансов приложения
(в будущем можем расширить). Возможно надо что-то сделать с БД, как то разбить ее.
Или сделать горизонтально расширяемой за счет количества серверов. В этом случае можно
перейти на noSQL БД Cassandra.
-----
